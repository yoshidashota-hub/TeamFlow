generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  ownedProjects Project[] @relation("ProjectOwner")
  sessions      Session[]
  assignedTasks Task[]    @relation("TaskAssignee")

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  color       String    @default("#3B82F6")
  ownerId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  endDate     DateTime?
  startDate   DateTime?
  owner       User      @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@index([ownerId])
  @@index([startDate])
  @@index([endDate])
  @@map("projects")
}

model Task {
  id             String    @id @default(cuid())
  title          String
  description    String?
  projectId      String
  project        Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assigneeId     String
  assignee       User      @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: Cascade)
  status         String    @default("未着手")
  priority       String    @default("中")
  dueDate        DateTime?
  estimatedHours Int?
  progress       Int       @default(0)
  tags           String[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([projectId])
  @@index([assigneeId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
  @@map("tasks")
}
